extend type Query {
  plantings(cropType: String!): [Planting!]!
  allPlantings: [Planting!]!
  planting(id: String!): Planting
  highlightedPlanting: Planting
  highlightedFilter: Filter
  groupedValues(cropType: String!): [GroupedValues!]!
  filters(cropType: String!): [Filter!]!
  filter(id: String!): Filter
  selectedCropType: String!
  test: Boolean!
  openEventCards(cropType: String!): [Planting!]!
  selectedFilter: Filter
  selectedProducer: Producer
  auth: AuthState,
}
extend type Planting {
  matchingFilters: [Filter!]!
  isHighlighted: Boolean!
}
type FilterValueOption {
  allOptions: [String!]!
  occurences: [Int!]!
  options: [String!]!
}
type FilterValueRange {
  values: [Float!]!,
  min: Float!,
  max: Float!,
}

union FilterValue = FilterValueOption | FilterValueRange
enum FilterParamDataSource {
  VALUES
  FARM_ONBOARDING
}

type FilterParam {
  modusId: String
  key: String!
  value: FilterValue!
  active: Boolean!
  dataSource: FilterParamDataSource,
}

type Filter {
  id: String!
  name: String!
  color: String!
  cropType: String!
  plantings: [Planting]!
  params: [FilterParam!]!
  isHighlighted: Boolean!
}

type GroupedValues {
  id: String!
  filter: Filter
  values: [PlantingValue!]!
}

type AuthUser { 
  id: String!
  name: String!
  email: String!
}

type AuthState {
  isLoggedIn: Boolean!
  user: AuthUser
}

