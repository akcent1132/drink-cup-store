type Query {
  plantings(cropType: String!): [Planting!]!
  allPlantings: [Planting!]!
  planting(id: String!): Planting
  plantingsById(ids: [String!]!): [Planting!]!
  producer(id: String!): Producer
  allFarmOnboardings: [FarmOnboarding!]!
  availableCropTypes: [AvailableCropType!]!
  connectedFarmIds: [String!]! 
}

type Mutation {
  login(email: String! password: String!): LoginResponse
}

type LoginResponse {
  success: Boolean!
  user: AuthUser
  error: String
}

type AuthUser {
  id: String!
  email: String!
  name: String
  token: String!
}

type Planting {
  id: String!
  cropType: String!
  values: [PlantingValue!]!
  title: String!
  producer: Producer!
  params: PlantingParams
  events: [PlantingEvent!]
  farmOnboarding: FarmOnboarding
}
type PlantingValue {
  name: String!
  value: Float!
  plantingId: String!
  modusId: String
}
type PlantingParams {
  sandPercentage: Int
  clayPercentage: Int
  soilGroup: String
  soilOrder: String
  soilSuborder: String
  soilTexture: Int
}

type PlantingEvent {
  id: String!
  type: String!
  date: String!
  details: [PlantingEventDetail!]
  _planting_id_for_details_request: String!
  _producer_key_for_details_request: String!
}

type PlantingEventDetail {
  id: String!
  name: String!
  value: String
  valueList: [String!]
}

type Producer {
  id: String!
  code: String!
  plantings: [Planting!]!
}

type FarmOnboardingValue {
  key: String!
  values: [String!]!
}

type FarmOnboarding {
  id: String!
  farmDomain: String
  climateZone: String
  averageAnnualTemperature: Float
  averageAnnualRainfall: Float
  values: [FarmOnboardingValue!]
}

type AvailableCropType {
  id: String!
  cropType: String!
  plantingCount: Int!
}
